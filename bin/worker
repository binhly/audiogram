#!/usr/bin/env node

// Require settings first, for validation
require("../lib/settings/");

var dotenv = require("dotenv").config({silent: true}),
    fs = require("fs"),
    Audiogram = require("../audiogram/"),
    path = require("path"),
    FormData = require("form-data"),
    http = require("http"),
    transports = require("../lib/transports/");

// Can only register fonts once, double-registering throws an error
require("../lib/register-fonts.js");

pluckJob();

function pluckJob(){

  transports.getJob(function(err, job){

    if (err) {
      throw err;
    }

    if (job) {

      return render(job);

    }

    setTimeout(pluckJob, delay());

  });

}

function render(job) {

  var audiogram = new Audiogram(job.id);

  audiogram.settings = job;

  audiogram.render(function(err){

    if (err) {
      audiogram.status("error");
      audiogram.set("error", err.toString());
      throw err;
    }

    audiogram.status("ready");
    uploadVideo(job);

    if (process.env.SPAWNED) {
      return transports.quit();
    }

    setTimeout(pluckJob, delay());

  });

}

function uploadVideo(job) {

    var videoURL = transports.getURL(job.id)
    var videoPath = path.join(__dirname, "..", "media", videoURL)

    const form = new FormData();

    form.append('audiogram[media]', fs.createReadStream(videoPath));
    form.append('audiogram[transcript]', "NICE")

    form.submit('https://operatorapp.com/v1/audiograms', function(err, res) {

      if (err) {
        console.log(err)
        throw err
      }
      // res â€“ response object (http.IncomingMessage)  //
      res.resume();
    });

}

function delay() {
   return transports.workerDelay ? transports.workerDelay() : 0;
}
